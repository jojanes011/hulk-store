// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

enum Enum_RoleName {
  customer
  admin
}

enum Enum_PaymentType {
  Efectivo
  Credito
  Debito
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  payment         Payment     @relation(fields: [paymentId], references: [id])
  paymentId       String
  deliveryDate    DateTime
  delivered       Boolean     @default(false)
  deliveryAddress String
  notes           String?     @db.VarChar(500)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderLines      OrderLine[]
}

model OrderLine {
  id        String   @id @default(cuid())
  amount    Int
  comments  String   @db.VarChar(500)
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Payment {
  id          String           @id @default(cuid())
  paymentType Enum_PaymentType
  subtotal    Float
  tax         Float
  total       Float
  confirmed   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orders      Order[]
}

model Page {
  id        String   @id @default(cuid())
  name      String   @unique
  route     String   @unique
  isPublic  Boolean  @default(false)
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String      @db.VarChar(500)
  imagePath   String?      @db.VarChar(500)
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderLines  OrderLine[]
}

model Profile {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  phoneNumber String
  document    String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  pages     Page[]
  users     User[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  enabled       Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  roles         Role[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
